export const qdmCallStack = [
  {
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|EarliestOf": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Earliest",
        definitionName: "Earliest",
        definitionLogic:
          'define function "Earliest"(period Interval<DateTime> ):\n  if ( HasStart(period)) then start of period \n    else \n  end of period',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Earliest",
        function: true,
        logic:
          'define function "Earliest"(period Interval<DateTime> ):\n  if ( HasStart(period)) then start of period \n    else \n  end of period',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|NormalizeInterval",
        definitionName: "NormalizeInterval",
        definitionLogic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "NormalizeInterval",
        function: true,
        logic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|Latest": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HasEnd",
        definitionName: "HasEnd",
        definitionLogic:
          'define function "HasEnd"(period Interval<DateTime> ):\n  not ( \n    end of period is null\n      or \n      end of period = maximum DateTime\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "HasEnd",
        function: true,
        logic:
          'define function "HasEnd"(period Interval<DateTime> ):\n  not ( \n    end of period is null\n      or \n      end of period = maximum DateTime\n  )',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalizationWithObservationLengthofStay":
      [
        {
          id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalizationWithObservation",
          definitionName: "HospitalizationWithObservation",
          definitionLogic:
            'define function "HospitalizationWithObservation"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet ObsVisit: Last(["Encounter, Performed": "Observation Services"] LastObs\n  \t\t\twhere LastObs.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t),\n  \tVisitStart: Coalesce(start of ObsVisit.relevantPeriod, start of Visit.relevantPeriod),\n  \tEDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before VisitStart\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn Interval[Coalesce(start of EDVisit.relevantPeriod, VisitStart), \n  \tend of Visit.relevantPeriod]',
          context: "Patient",
          supplDataElement: false,
          popDefinition: false,
          commentString: "",
          returnType: null,
          parentLibrary: "MATGlobalCommonFunctionsQDM",
          libraryDisplayName: "Global",
          libraryVersion: "1.0.000",
          name: "HospitalizationWithObservation",
          function: true,
          logic:
            'define function "HospitalizationWithObservation"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet ObsVisit: Last(["Encounter, Performed": "Observation Services"] LastObs\n  \t\t\twhere LastObs.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t),\n  \tVisitStart: Coalesce(start of ObsVisit.relevantPeriod, start of Visit.relevantPeriod),\n  \tEDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before VisitStart\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn Interval[Coalesce(start of EDVisit.relevantPeriod, VisitStart), \n  \tend of Visit.relevantPeriod]',
        },
        {
          id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|LengthInDays",
          definitionName: "LengthInDays",
          definitionLogic:
            'define function "LengthInDays"(Value Interval<DateTime> ):\n  difference in days between start of Value and end of Value',
          context: "Patient",
          supplDataElement: false,
          popDefinition: false,
          commentString: "",
          returnType: null,
          parentLibrary: "MATGlobalCommonFunctionsQDM",
          libraryDisplayName: "Global",
          libraryVersion: "1.0.000",
          name: "LengthInDays",
          function: true,
          logic:
            'define function "LengthInDays"(Value Interval<DateTime> ):\n  difference in days between start of Value and end of Value',
        },
      ],
    EDEncounter: [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|ED Encounter",
        definitionName: "ED Encounter",
        definitionLogic:
          'define "ED Encounter":\n  ["Encounter, Performed": "Emergency Department Visit"]',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "ED Encounter",
        function: false,
        logic:
          'define "ED Encounter":\n  ["Encounter, Performed": "Emergency Department Visit"]',
      },
    ],
    LastEDEncounter: [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|ED Encounter",
        definitionName: "ED Encounter",
        definitionLogic:
          'define "ED Encounter":\n  ["Encounter, Performed": "Emergency Department Visit"]',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "ED Encounter",
        function: false,
        logic:
          'define "ED Encounter":\n  ["Encounter, Performed": "Emergency Department Visit"]',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|Earliest": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HasStart",
        definitionName: "HasStart",
        definitionLogic:
          'define function "HasStart"(period Interval<DateTime> ):\n  not ( start of period is null\n      or start of period = minimum DateTime\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "HasStart",
        function: true,
        logic:
          'define function "HasStart"(period Interval<DateTime> ):\n  not ( start of period is null\n      or start of period = minimum DateTime\n  )',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|LatestOf": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Latest",
        definitionName: "Latest",
        definitionLogic:
          'define function "Latest"(period Interval<DateTime> ):\n  if ( HasEnd(period)) then \n  end of period \n    else start of period',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Latest",
        function: true,
        logic:
          'define function "Latest"(period Interval<DateTime> ):\n  if ( HasEnd(period)) then \n  end of period \n    else start of period',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|NormalizeInterval",
        definitionName: "NormalizeInterval",
        definitionLogic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "NormalizeInterval",
        function: true,
        logic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
      },
    ],
    EDDepartureTime: [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HasEnd",
        definitionName: "HasEnd",
        definitionLogic:
          'define function "HasEnd"(period Interval<DateTime> ):\n  not ( \n    end of period is null\n      or \n      end of period = maximum DateTime\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "HasEnd",
        function: true,
        logic:
          'define function "HasEnd"(period Interval<DateTime> ):\n  not ( \n    end of period is null\n      or \n      end of period = maximum DateTime\n  )',
      },
    ],
    AdmitDecisionUsingEncounterOrder: [
      {
        id: "EDDepartureTime",
        definitionName: "EDDepartureTime",
        definitionLogic:
          'define function "EDDepartureTime"(Encounter "Encounter, Performed" ):\n  /*The time the patient physically departed the Emergency Department*/\n  Last(Encounter.facilityLocations Location\n      where Location.code in "Emergency Department Visit"\n        and Global."HasEnd"(Location.locationPeriod)\n      return \n      end of Location.locationPeriod\n      sort ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "EDDepartureTime",
        function: true,
        logic:
          'define function "EDDepartureTime"(Encounter "Encounter, Performed" ):\n  /*The time the patient physically departed the Emergency Department*/\n  Last(Encounter.facilityLocations Location\n      where Location.code in "Emergency Department Visit"\n        and Global."HasEnd"(Location.locationPeriod)\n      return \n      end of Location.locationPeriod\n      sort ascending\n  )',
      },
      {
        id: "LastEDEncounter",
        definitionName: "LastEDEncounter",
        definitionLogic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "LastEDEncounter",
        function: true,
        logic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|Inpatient Encounter": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|LengthInDays",
        definitionName: "LengthInDays",
        definitionLogic:
          'define function "LengthInDays"(Value Interval<DateTime> ):\n  difference in days between start of Value and end of Value',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "LengthInDays",
        function: true,
        logic:
          'define function "LengthInDays"(Value Interval<DateTime> ):\n  difference in days between start of Value and end of Value',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|EmergencyDepartmentArrivalTime":
      [
        {
          id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalizationLocations",
          definitionName: "HospitalizationLocations",
          definitionLogic:
            'define function "HospitalizationLocations"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn if EDVisit is null then Visit.facilityLocations \n  \t\telse flatten { EDVisit.facilityLocations, Visit.facilityLocations }',
          context: "Patient",
          supplDataElement: false,
          popDefinition: false,
          commentString: "",
          returnType: null,
          parentLibrary: "MATGlobalCommonFunctionsQDM",
          libraryDisplayName: "Global",
          libraryVersion: "1.0.000",
          name: "HospitalizationLocations",
          function: true,
          logic:
            'define function "HospitalizationLocations"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn if EDVisit is null then Visit.facilityLocations \n  \t\telse flatten { EDVisit.facilityLocations, Visit.facilityLocations }',
        },
      ],
    MeasureObservation: [
      {
        id: "EDDepartureTime",
        definitionName: "EDDepartureTime",
        definitionLogic:
          'define function "EDDepartureTime"(Encounter "Encounter, Performed" ):\n  /*The time the patient physically departed the Emergency Department*/\n  Last(Encounter.facilityLocations Location\n      where Location.code in "Emergency Department Visit"\n        and Global."HasEnd"(Location.locationPeriod)\n      return \n      end of Location.locationPeriod\n      sort ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "EDDepartureTime",
        function: true,
        logic:
          'define function "EDDepartureTime"(Encounter "Encounter, Performed" ):\n  /*The time the patient physically departed the Emergency Department*/\n  Last(Encounter.facilityLocations Location\n      where Location.code in "Emergency Department Visit"\n        and Global."HasEnd"(Location.locationPeriod)\n      return \n      end of Location.locationPeriod\n      sort ascending\n  )',
      },
      {
        id: "AdmitDecisionUsingEncounterOrder",
        definitionName: "AdmitDecisionUsingEncounterOrder",
        definitionLogic:
          'define function "AdmitDecisionUsingEncounterOrder"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit order and time that occurred during the last ED visit*/\n  Last(["Encounter, Order": "Decision to Admit to Hospital Inpatient"] AdmitOrder\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where AdmitOrder.authorDatetime during LastEDVisit.relevantPeriod\n        and AdmitOrder.authorDatetime before or on "EDDepartureTime"(LastEDVisit)\n      sort by authorDatetime\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "AdmitDecisionUsingEncounterOrder",
        function: true,
        logic:
          'define function "AdmitDecisionUsingEncounterOrder"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit order and time that occurred during the last ED visit*/\n  Last(["Encounter, Order": "Decision to Admit to Hospital Inpatient"] AdmitOrder\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where AdmitOrder.authorDatetime during LastEDVisit.relevantPeriod\n        and AdmitOrder.authorDatetime before or on "EDDepartureTime"(LastEDVisit)\n      sort by authorDatetime\n  )',
      },
      {
        id: "LastEDEncounter",
        definitionName: "LastEDEncounter",
        definitionLogic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "LastEDEncounter",
        function: true,
        logic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|NormalizeInterval",
        definitionName: "NormalizeInterval",
        definitionLogic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "NormalizeInterval",
        function: true,
        logic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
      },
      {
        id: "AdmitDecisionUsingAssessment",
        definitionName: "AdmitDecisionUsingAssessment",
        definitionLogic:
          'define function "AdmitDecisionUsingAssessment"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit assessment, time, and result that was performed during the last ED visit*/\n  Last(["Assessment, Performed": "Emergency Department Evaluation"] EDEvaluation\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where EDEvaluation.result in "Admit Inpatient"\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts during LastEDVisit.relevantPeriod\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts before or on "EDDepartureTime"(LastEDVisit)\n      sort by start of Global."NormalizeInterval"(relevantDatetime, relevantPeriod)\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "AdmitDecisionUsingAssessment",
        function: true,
        logic:
          'define function "AdmitDecisionUsingAssessment"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit assessment, time, and result that was performed during the last ED visit*/\n  Last(["Assessment, Performed": "Emergency Department Evaluation"] EDEvaluation\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where EDEvaluation.result in "Admit Inpatient"\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts during LastEDVisit.relevantPeriod\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts before or on "EDDepartureTime"(LastEDVisit)\n      sort by start of Global."NormalizeInterval"(relevantDatetime, relevantPeriod)\n  )',
      },
    ],
    "Measure Population Exclusions": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Inpatient Encounter",
        definitionName: "Inpatient Encounter",
        definitionLogic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Inpatient Encounter",
        function: false,
        logic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
      },
      {
        id: "LastEDEncounter",
        definitionName: "LastEDEncounter",
        definitionLogic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "LastEDEncounter",
        function: true,
        logic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
      },
    ],
    "Stratification 2": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Inpatient Encounter",
        definitionName: "Inpatient Encounter",
        definitionLogic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Inpatient Encounter",
        function: false,
        logic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
      },
    ],
    "Stratification 1": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Inpatient Encounter",
        definitionName: "Inpatient Encounter",
        definitionLogic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Inpatient Encounter",
        function: false,
        logic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalDepartureTime": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalizationLocations",
        definitionName: "HospitalizationLocations",
        definitionLogic:
          'define function "HospitalizationLocations"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn if EDVisit is null then Visit.facilityLocations \n  \t\telse flatten { EDVisit.facilityLocations, Visit.facilityLocations }',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "HospitalizationLocations",
        function: true,
        logic:
          'define function "HospitalizationLocations"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn if EDVisit is null then Visit.facilityLocations \n  \t\telse flatten { EDVisit.facilityLocations, Visit.facilityLocations }',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalArrivalTime": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalizationLocations",
        definitionName: "HospitalizationLocations",
        definitionLogic:
          'define function "HospitalizationLocations"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn if EDVisit is null then Visit.facilityLocations \n  \t\telse flatten { EDVisit.facilityLocations, Visit.facilityLocations }',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "HospitalizationLocations",
        function: true,
        logic:
          'define function "HospitalizationLocations"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn if EDVisit is null then Visit.facilityLocations \n  \t\telse flatten { EDVisit.facilityLocations, Visit.facilityLocations }',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalAdmissionTime": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Hospitalization",
        definitionName: "Hospitalization",
        definitionLogic:
          'define function "Hospitalization"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn Interval[Coalesce(start of EDVisit.relevantPeriod, start of Visit.relevantPeriod), \n  \tend of Visit.relevantPeriod]',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Hospitalization",
        function: true,
        logic:
          'define function "Hospitalization"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn Interval[Coalesce(start of EDVisit.relevantPeriod, start of Visit.relevantPeriod), \n  \tend of Visit.relevantPeriod]',
      },
    ],
    "MATGlobalCommonFunctionsQDM-1.0.000|Global|HospitalizationLengthofStay": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Hospitalization",
        definitionName: "Hospitalization",
        definitionLogic:
          'define function "Hospitalization"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn Interval[Coalesce(start of EDVisit.relevantPeriod, start of Visit.relevantPeriod), \n  \tend of Visit.relevantPeriod]',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Hospitalization",
        function: true,
        logic:
          'define function "Hospitalization"(Encounter "Encounter, Performed" ):\n  Encounter Visit\n  \tlet EDVisit: Last(["Encounter, Performed": "Emergency Department Visit"] LastED\n  \t\t\twhere LastED.relevantPeriod ends 1 hour or less on or before start of Visit.relevantPeriod\n  \t\t\tsort by \n  \t\t\tend of relevantPeriod\n  \t)\n  \treturn Interval[Coalesce(start of EDVisit.relevantPeriod, start of Visit.relevantPeriod), \n  \tend of Visit.relevantPeriod]',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|LengthInDays",
        definitionName: "LengthInDays",
        definitionLogic:
          'define function "LengthInDays"(Value Interval<DateTime> ):\n  difference in days between start of Value and end of Value',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "LengthInDays",
        function: true,
        logic:
          'define function "LengthInDays"(Value Interval<DateTime> ):\n  difference in days between start of Value and end of Value',
      },
    ],
    "Initial Population": [
      {
        id: "ED Encounter with Decision to Admit",
        definitionName: "ED Encounter with Decision to Admit",
        definitionLogic:
          'define "ED Encounter with Decision to Admit":\n  /*Constrains the inpatient encounter to having an ED visit with a decision to admit (assessment or order) to inpatient and ED facility location period is not null*/\n  Global."Inpatient Encounter" EncounterInpatient\n    let LastEDVisit: LastEDEncounter(EncounterInpatient),\n    AdmitAssessment: "AdmitDecisionUsingAssessment"(EncounterInpatient)\n    where ( Global."NormalizeInterval" ( AdmitAssessment.relevantDatetime, AdmitAssessment.relevantPeriod ) starts during LastEDVisit.relevantPeriod\n        or ( "AdmitDecisionUsingEncounterOrder"(EncounterInpatient).authorDatetime during LastEDVisit.relevantPeriod )\n    )\n      and exists ( LastEDVisit.facilityLocations Location\n          where Location.code in "Emergency Department Visit"\n            and Global."HasEnd" ( Location.locationPeriod )\n      )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "ED Encounter with Decision to Admit",
        function: false,
        logic:
          'define "ED Encounter with Decision to Admit":\n  /*Constrains the inpatient encounter to having an ED visit with a decision to admit (assessment or order) to inpatient and ED facility location period is not null*/\n  Global."Inpatient Encounter" EncounterInpatient\n    let LastEDVisit: LastEDEncounter(EncounterInpatient),\n    AdmitAssessment: "AdmitDecisionUsingAssessment"(EncounterInpatient)\n    where ( Global."NormalizeInterval" ( AdmitAssessment.relevantDatetime, AdmitAssessment.relevantPeriod ) starts during LastEDVisit.relevantPeriod\n        or ( "AdmitDecisionUsingEncounterOrder"(EncounterInpatient).authorDatetime during LastEDVisit.relevantPeriod )\n    )\n      and exists ( LastEDVisit.facilityLocations Location\n          where Location.code in "Emergency Department Visit"\n            and Global."HasEnd" ( Location.locationPeriod )\n      )',
      },
    ],
    AdmitDecisionUsingAssessment: [
      {
        id: "EDDepartureTime",
        definitionName: "EDDepartureTime",
        definitionLogic:
          'define function "EDDepartureTime"(Encounter "Encounter, Performed" ):\n  /*The time the patient physically departed the Emergency Department*/\n  Last(Encounter.facilityLocations Location\n      where Location.code in "Emergency Department Visit"\n        and Global."HasEnd"(Location.locationPeriod)\n      return \n      end of Location.locationPeriod\n      sort ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "EDDepartureTime",
        function: true,
        logic:
          'define function "EDDepartureTime"(Encounter "Encounter, Performed" ):\n  /*The time the patient physically departed the Emergency Department*/\n  Last(Encounter.facilityLocations Location\n      where Location.code in "Emergency Department Visit"\n        and Global."HasEnd"(Location.locationPeriod)\n      return \n      end of Location.locationPeriod\n      sort ascending\n  )',
      },
      {
        id: "LastEDEncounter",
        definitionName: "LastEDEncounter",
        definitionLogic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "LastEDEncounter",
        function: true,
        logic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|NormalizeInterval",
        definitionName: "NormalizeInterval",
        definitionLogic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "NormalizeInterval",
        function: true,
        logic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
      },
    ],
    "ED Encounter with Decision to Admit": [
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|HasEnd",
        definitionName: "HasEnd",
        definitionLogic:
          'define function "HasEnd"(period Interval<DateTime> ):\n  not ( \n    end of period is null\n      or \n      end of period = maximum DateTime\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "HasEnd",
        function: true,
        logic:
          'define function "HasEnd"(period Interval<DateTime> ):\n  not ( \n    end of period is null\n      or \n      end of period = maximum DateTime\n  )',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|Inpatient Encounter",
        definitionName: "Inpatient Encounter",
        definitionLogic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "Inpatient Encounter",
        function: false,
        logic:
          'define "Inpatient Encounter":\n  ["Encounter, Performed": "Encounter Inpatient"] EncounterInpatient\n    where "LengthInDays"(EncounterInpatient.relevantPeriod)<= 120\n      and EncounterInpatient.relevantPeriod ends during day of "Measurement Period"',
      },
      {
        id: "AdmitDecisionUsingEncounterOrder",
        definitionName: "AdmitDecisionUsingEncounterOrder",
        definitionLogic:
          'define function "AdmitDecisionUsingEncounterOrder"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit order and time that occurred during the last ED visit*/\n  Last(["Encounter, Order": "Decision to Admit to Hospital Inpatient"] AdmitOrder\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where AdmitOrder.authorDatetime during LastEDVisit.relevantPeriod\n        and AdmitOrder.authorDatetime before or on "EDDepartureTime"(LastEDVisit)\n      sort by authorDatetime\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "AdmitDecisionUsingEncounterOrder",
        function: true,
        logic:
          'define function "AdmitDecisionUsingEncounterOrder"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit order and time that occurred during the last ED visit*/\n  Last(["Encounter, Order": "Decision to Admit to Hospital Inpatient"] AdmitOrder\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where AdmitOrder.authorDatetime during LastEDVisit.relevantPeriod\n        and AdmitOrder.authorDatetime before or on "EDDepartureTime"(LastEDVisit)\n      sort by authorDatetime\n  )',
      },
      {
        id: "LastEDEncounter",
        definitionName: "LastEDEncounter",
        definitionLogic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "LastEDEncounter",
        function: true,
        logic:
          'define function "LastEDEncounter"(EncounterInpatient "Encounter, Performed" ):\n  /*The most recent (last) ED encounter that is within an hour of an inpatient encounter*/\n  Last(Global."ED Encounter" EDVisit\n      where EDVisit.relevantPeriod ends 1 hour or less before or on start of EncounterInpatient.relevantPeriod\n      sort by \n      end of relevantPeriod ascending\n  )',
      },
      {
        id: "MATGlobalCommonFunctionsQDM-1.0.000|Global|NormalizeInterval",
        definitionName: "NormalizeInterval",
        definitionLogic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: "MATGlobalCommonFunctionsQDM",
        libraryDisplayName: "Global",
        libraryVersion: "1.0.000",
        name: "NormalizeInterval",
        function: true,
        logic:
          'define function "NormalizeInterval"(pointInTime DateTime, period Interval<DateTime> ):\n  if pointInTime is not null then Interval[pointInTime, pointInTime]\n    else if period is not null then period \n    else null as Interval<DateTime>',
      },
      {
        id: "AdmitDecisionUsingAssessment",
        definitionName: "AdmitDecisionUsingAssessment",
        definitionLogic:
          'define function "AdmitDecisionUsingAssessment"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit assessment, time, and result that was performed during the last ED visit*/\n  Last(["Assessment, Performed": "Emergency Department Evaluation"] EDEvaluation\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where EDEvaluation.result in "Admit Inpatient"\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts during LastEDVisit.relevantPeriod\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts before or on "EDDepartureTime"(LastEDVisit)\n      sort by start of Global."NormalizeInterval"(relevantDatetime, relevantPeriod)\n  )',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "AdmitDecisionUsingAssessment",
        function: true,
        logic:
          'define function "AdmitDecisionUsingAssessment"(EncounterInpatient "Encounter, Performed" ):\n  /*Captures the decision to admit assessment, time, and result that was performed during the last ED visit*/\n  Last(["Assessment, Performed": "Emergency Department Evaluation"] EDEvaluation\n      let LastEDVisit: "LastEDEncounter"(EncounterInpatient)\n      where EDEvaluation.result in "Admit Inpatient"\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts during LastEDVisit.relevantPeriod\n        and Global."NormalizeInterval"(EDEvaluation.relevantDatetime, EDEvaluation.relevantPeriod)starts before or on "EDDepartureTime"(LastEDVisit)\n      sort by start of Global."NormalizeInterval"(relevantDatetime, relevantPeriod)\n  )',
      },
    ],
    "Measure Population": [
      {
        id: "Initial Population",
        definitionName: "Initial Population",
        definitionLogic:
          'define "Initial Population":\n\n  "ED Encounter with Decision to Admit"',
        context: "Patient",
        supplDataElement: false,
        popDefinition: false,
        commentString: "",
        returnType: null,
        parentLibrary: null,
        libraryDisplayName: null,
        libraryVersion: null,
        name: "Initial Population",
        function: false,
        logic:
          'define "Initial Population":\n\n  "ED Encounter with Decision to Admit"',
      },
    ],
  },
];
